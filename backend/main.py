# backend/main.py
import os
import sys
import time
import logging
from datetime import datetime
from typing import Optional, List, Dict, Any

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
import uvicorn

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Configura√ß√µes - importar das configura√ß√µes centralizadas
from app.core.config import settings
from app.db.session import SessionLocal, engine
from app.db.init_db import init_db

# Verificar conex√£o com banco de dados
def check_database_connection():
    """Verificar se o banco de dados est√° acess√≠vel"""
    try:
        # Tentar criar uma sess√£o e fazer uma consulta simples
        from sqlalchemy import text
        db = SessionLocal()
        db.execute(text("SELECT 1"))
        db.close()
        logger.info("üóÉÔ∏è Conex√£o com banco de dados: ‚úÖ OK")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erro na conex√£o com banco de dados: {e}")
        return False

# Inicializar banco de dados
def initialize_database():
    """Inicializar banco de dados com dados padr√£o"""
    try:
        init_db()
        logger.info("üóÉÔ∏è Banco de dados inicializado com sucesso!")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erro ao inicializar banco de dados: {e}")
        return False

# Verificar e inicializar banco na inicializa√ß√£o
if check_database_connection():
    initialize_database()
else:
    logger.warning("‚ö†Ô∏è Sistema iniciando sem conex√£o com banco de dados")

# ==================== FASTAPI APP ====================

app = FastAPI(
    title=settings.PROJECT_NAME,
    description="Sistema ERP desenvolvido com Claude AI - API Backend",
    version=settings.VERSION,
    openapi_url=f"{settings.API_V1_STR}/openapi.json",
    docs_url="/docs",
    redoc_url="/redoc",
    debug=settings.DEBUG
)

# ==================== MIDDLEWARE ====================

# Middleware de CORS - CONFIGURA√á√ÉO CORRIGIDA
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.BACKEND_CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
    allow_headers=[
        "Accept",
        "Accept-Language", 
        "Content-Language",
        "Content-Type",
        "Authorization",
        "X-Requested-With",
        "X-CSRFToken",
        "Cache-Control"
    ],
    expose_headers=["Content-Range", "X-Content-Range"],
    max_age=3600,
)

# Middleware de hosts confi√°veis (seguran√ßa)
app.add_middleware(
    TrustedHostMiddleware, 
    allowed_hosts=["*"]  # Configure adequadamente em produ√ß√£o
)

# ==================== EXCEPTION HANDLERS ====================

@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """Handler customizado para exce√ß√µes HTTP"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "detail": exc.detail,
            "status_code": exc.status_code,
            "timestamp": datetime.utcnow().isoformat(),
            "path": str(request.url)
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """Handler para exce√ß√µes gerais"""
    logger.error(f"Erro n√£o tratado: {exc}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={
            "detail": "Erro interno do servidor",
            "status_code": 500,
            "timestamp": datetime.utcnow().isoformat(),
            "path": str(request.url)
        }
    )

# ==================== HEALTH CHECK ROUTES ====================

@app.get("/")
async def root():
    """Root endpoint"""
    return {
        "message": f"üöÄ {settings.PROJECT_NAME} - Backend API",
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT,
        "docs": "/docs",
        "health": "/health",
        "api": settings.API_V1_STR,
        "timestamp": datetime.utcnow().isoformat()
    }

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    db_status = "connected" if check_database_connection() else "disconnected"
    
    health_info = {
        "status": "healthy" if db_status == "connected" else "degraded",
        "database": db_status,
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT,
        "timestamp": datetime.utcnow().isoformat(),
        "uptime": "available"
    }
    
    if db_status == "disconnected":
        return JSONResponse(
            status_code=503,
            content=health_info
        )
    
    return health_info

@app.get("/health/database")
async def database_health():
    """Database specific health check"""
    try:
        from sqlalchemy import text
        db = SessionLocal()
        
        # Teste de consulta simples
        start_time = time.time()
        result = db.execute(text("SELECT COUNT(*) as count FROM users"))
        query_time = time.time() - start_time
        
        user_count = result.scalar()
        db.close()
        
        return {
            "status": "healthy",
            "database_url": settings.DATABASE_URL.split("@")[-1] if "@" in settings.DATABASE_URL else "local",
            "query_time_ms": round(query_time * 1000, 2),
            "user_count": user_count,
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Database health check failed: {e}")
        return JSONResponse(
            status_code=503,
            content={
                "status": "unhealthy",
                "error": str(e),
                "timestamp": datetime.utcnow().isoformat()
            }
        )

# ==================== API ROUTERS ====================

# Importar e incluir roteadores da API
try:
    from app.api.v1.api import api_router
    app.include_router(api_router, prefix=settings.API_V1_STR)
    logger.info("‚úÖ API routers inclu√≠dos com sucesso!")
    
    # Log das rotas registradas
    logger.info("üìã Rotas registradas:")
    for route in app.routes:
        if hasattr(route, 'methods') and hasattr(route, 'path'):
            methods = ', '.join(route.methods)
            logger.info(f"  {methods}: {route.path}")
            
except ImportError as e:
    logger.error(f"‚ùå Erro ao importar routers da API: {e}")
    logger.info("‚ö†Ô∏è Sistema funcionando em modo b√°sico")

# ==================== STARTUP & SHUTDOWN EVENTS ====================

@app.on_event("startup")
async def startup_event():
    """Eventos na inicializa√ß√£o da aplica√ß√£o"""
    logger.info(f"üöÄ Iniciando {settings.PROJECT_NAME} v{settings.VERSION}")
    logger.info(f"üåç Ambiente: {settings.ENVIRONMENT}")
    logger.info(f"üîß Debug: {settings.DEBUG}")
    logger.info(f"üìä CORS Origins: {settings.BACKEND_CORS_ORIGINS}")
    
    # Verificar configura√ß√µes cr√≠ticas
    if settings.SECRET_KEY == "dev-secret-key-change-in-production-please-use-a-strong-secret":
        logger.warning("‚ö†Ô∏è AVISO: Usando chave secreta padr√£o. Altere em produ√ß√£o!")
    
    if settings.ENVIRONMENT == "production" and settings.DEBUG:
        logger.warning("‚ö†Ô∏è AVISO: Debug habilitado em produ√ß√£o!")

@app.on_event("shutdown")
async def shutdown_event():
    """Eventos no encerramento da aplica√ß√£o"""
    logger.info("üõë Encerrando aplica√ß√£o...")

# ==================== MAIN ====================

if __name__ == "__main__":
    # Configura√ß√µes do servidor
    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", "8000"))
    
    logger.info(f"üåê Servidor rodando em http://{host}:{port}")
    logger.info(f"üìö Documenta√ß√£o dispon√≠vel em http://{host}:{port}/docs")
    
    uvicorn.run(
        "main:app",
        host=host,
        port=port,
        reload=settings.ENVIRONMENT == "development",
        log_level=settings.LOG_LEVEL.lower(),
        access_log=True
    )
